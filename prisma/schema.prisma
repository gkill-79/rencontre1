generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  password          String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  profile           Profile?
  messagesSent      Message[]       @relation("MessagesSent")
  messagesReceived  Message[]       @relation("MessagesReceived")
  likesSent         Like[]          @relation("LikesSent")
  likesReceived     Like[]          @relation("LikesReceived")
  matchesAsUser1    Match[]         @relation("MatchUser1")
  matchesAsUser2    Match[]         @relation("MatchUser2")
  notifications     Notification[]
}

model Profile {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name        String
  age         Int
  location    String
  description String?
  photos      String[]
  interests   String[]
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  sentAt     DateTime @default(now())
  sender     User     @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiver   User     @relation("MessagesReceived", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Like {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  createdAt  DateTime @default(now())
  sender     User     @relation("LikesSent", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiver   User     @relation("LikesReceived", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@unique([senderId, receiverId])
}

model Match {
  id        Int      @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  createdAt DateTime @default(now())
  user1     User     @relation("MatchUser1", fields: [user1Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user2     User     @relation("MatchUser2", fields: [user2Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@unique([user1Id, user2Id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
